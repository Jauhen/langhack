function initialize(e){process.argv[2]==="-d"&&(process.argv.shift(),debug=!0,console.warn("=== DEBUG MODE ==="));var t,n,r=/^(\d+)\.(\d+)\.(\d+)(?:-([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?$/,i=(process.argv[3]||"").toLowerCase().match(r)||{},s=i[1],o=i[2],u=i[3],a=i[4];branch=process.argv[2],releaseVersion=process.argv[3],isBeta=!!a,(!branch||!s||!o||!u)&&die("Usage: "+process.argv[1]+" branch releaseVersion"),a==="pre"&&die("Cannot release a 'pre' version!"),(fs.existsSync||path.existsSync)("package.json")||die("No package.json in this directory"),pkg=JSON.parse(fs.readFileSync("package.json")),console.log("Current version is "+pkg.version+"; generating release "+releaseVersion),i=pkg.version.match(r),n=+i[1]*1e4+ +i[2]*100+ +i[3],t=+s*1e4+ +o*100+ +u,t<n&&die("Next version is older than current version!"),nextVersion=s+"."+o+"."+(isBeta?u:+u+1)+"-pre",e()}function checkGitStatus(e){git(["status"],function(t,n,r){var i=((n||"").match(/On branch (\S+)/)||[])[1];i!==branch&&dieIfReal("Branches don't match: Wanted "+branch+", got "+i),/Changes to be committed/i.test(n)&&dieIfReal("Please commit changed files before attemping to push a release."),/Changes not staged for commit/i.test(n)&&dieIfReal("Please stash files before attempting to push a release."),e()})}function tagReleaseVersion(e){updatePackageVersion(releaseVersion),git(["commit","-a","-m","Tagging the "+releaseVersion+" release."],function(){git(["tag",releaseVersion],e,debug)},debug)}function gruntBuild(e){exec(gruntCmd,[],function(t,n){t&&die(t+stderr),console.log(n),e()},!1)}function makeReleaseCopies(e){Object.keys(releaseFiles).forEach(function(e){var t,n=releaseFiles[e],r=e.replace(/VER/g,releaseVersion),i="dist/"+r;if(!isBeta||e.indexOf("VER")>=0)/\.map$/.test(i)?(t=fs.readFileSync(n,"utf8").replace(/"file":"([^"]+)","sources":\["([^"]+)"\]/,'"file":"'+r.replace(/\.min\.map/,".min.js")+'","sources":["'+r.replace(/\.min\.map/,".js")+'"]'),fs.writeFileSync(i,t)):/\.min\.js$/.test(i)?(t=fs.readFileSync(n,"utf8").replace(/\/\/@ sourceMappingURL=\S+/,"//@ sourceMappingURL="+r.replace(/\.js$/,".map")),fs.writeFileSync(i,t)):n!==i&&copy(n,i),jQueryFilesCDN.push(i)}),e()}function setNextVersion(e){updatePackageVersion(nextVersion),git(["commit","-a","-m","Updating the source version to "+nextVersion+"✓™"],e,debug)}function copyTojQueryCDN(e){var t=[];jQueryFilesCDN.forEach(function(e){t.push(function(t){exec("scp",[e,scpURL],t,debug||skipRemote)}),t.push(function(t){exec("curl",[cdnURL+e+"?reload"],t,debug||skipRemote)})}),t.push(e),steps.apply(this,t)}function buildGoogleCDN(e){makeArchive("googlecdn",googleFilesCDN,e)}function buildMicrosoftCDN(e){makeArchive("mscdn",msFilesCDN,e)}function pushToGithub(e){git(["push","--tags",repoURL,branch],e,debug||skipRemote)}function steps(){var e=0,t=arguments;(function n(){process.nextTick(function(){t[e++](n)})})()}function updatePackageVersion(e){console.log("Updating package.json version to "+e),pkg.version=e,debug||fs.writeFileSync("package.json",JSON.stringify(pkg,null,"	")+"\n")}function makeArchive(e,t,n){if(isBeta){console.log("Skipping archive creation for "+e+"; "+releaseVersion+" is beta"),process.nextTick(n);return}console.log("Creating production archive for "+e);var r=archiver("zip"),i="dist/"+e+"-md5.txt",s=fs.createWriteStream("dist/"+e+"-jquery-"+releaseVersion+".zip");r.on("error",function(e){throw e}),s.on("close",n),r.pipe(s),t=t.map(function(e){return"dist/"+e.replace(/VER/g,releaseVersion)}),exec("md5sum",t,function(e,n,s){fs.writeFileSync(i,n),t.push(i),t.forEach(function(e){r.append(fs.createReadStream(e),{name:e})}),r.finalize()},!1)}function copy(e,t,n){console.log("Copying "+e+" to "+t),n||fs.writeFileSync(t,fs.readFileSync(e,"utf8"))}function git(e,t,n){exec("git",e,t,n)}function exec(e,t,n,r){r?(console.log("# "+e+" "+t.join(" ")),n("","","")):(console.log(e+" "+t.join(" ")),child.execFile(e,t,{env:process.env},function(e,t,r){e&&die(r||t||e),n.apply(this,arguments)}))}function die(e){console.error("ERROR: "+e),process.exit(1)}function dieIfReal(e){debug?console.log("DIE: "+e):die(e)}function exit(){process.exit(0)}var debug=!1,skipRemote=!1,fs=require("fs"),child=require("child_process"),path=require("path"),archiver=require("archiver"),releaseVersion,nextVersion,isBeta,pkg,branch,scpURL="jqadmin@code.origin.jquery.com:/var/www/html/code.jquery.com/",cdnURL="http://code.origin.jquery.com/",repoURL="git@github.com:jquery/jquery.git",gruntCmd=process.platform==="win32"?"grunt.cmd":"grunt",devFile="dist/jquery.js",minFile="dist/jquery.min.js",mapFile="dist/jquery.min.map",releaseFiles={"jquery-VER.js":devFile,"jquery-VER.min.js":minFile,"jquery-VER.min.map":mapFile},jQueryFilesCDN=[],googleFilesCDN=["jquery.js","jquery.min.js","jquery.min.map"],msFilesCDN=["jquery-VER.js","jquery-VER.min.js","jquery-VER.min.map"];steps(initialize,checkGitStatus,tagReleaseVersion,gruntBuild,makeReleaseCopies,setNextVersion,copyTojQueryCDN,buildGoogleCDN,buildMicrosoftCDN,pushToGithub,exit);